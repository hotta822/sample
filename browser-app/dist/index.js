(()=>{var t={584:t=>{t.exports=function(t,e){return Array.prototype.slice.call(t,e)}},514:(t,e,n)=>{"use strict";var r=n(115);t.exports=function(t,e,n){t&&r((function(){t.apply(n||null,e||[])}))}},229:(t,e,n)=>{"use strict";var r=n(584),i=n(514);t.exports=function(t,e){var n=e||{},o={};return void 0===t&&(t={}),t.on=function(e,n){return o[e]?o[e].push(n):o[e]=[n],t},t.once=function(e,n){return n._once=!0,t.on(e,n),t},t.off=function(e,n){var r=arguments.length;if(1===r)delete o[e];else if(0===r)o={};else{var i=o[e];if(!i)return t;i.splice(i.indexOf(n),1)}return t},t.emit=function(){var e=r(arguments);return t.emitterSnapshot(e.shift()).apply(this,e)},t.emitterSnapshot=function(e){var s=(o[e]||[]).slice(0);return function(){var o=r(arguments),a=this||t;if("error"===e&&!1!==n.throws&&!s.length)throw 1===o.length?o[0]:o;return s.forEach((function(r){n.async?i(r,o,a):r.apply(a,o),r._once&&t.off(e,r)})),t}},t}},808:(t,e,n)=>{"use strict";var r=n(638),i=n(874),o=n.g.document,s=function(t,e,n,r){return t.addEventListener(e,n,r)},a=function(t,e,n,r){return t.removeEventListener(e,n,r)},c=[];function u(t,e,n){var r=function(t,e,n){var r,i;for(r=0;r<c.length;r++)if((i=c[r]).element===t&&i.type===e&&i.fn===n)return r}(t,e,n);if(r){var i=c[r].wrapper;return c.splice(r,1),i}}n.g.addEventListener||(s=function(t,e,r){return t.attachEvent("on"+e,function(t,e,r){var i=u(t,e,r)||function(t,e,r){return function(e){var i=e||n.g.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,r.call(t,i)}}(t,0,r);return c.push({wrapper:i,element:t,type:e,fn:r}),i}(t,e,r))},a=function(t,e,n){var r=u(t,e,n);if(r)return t.detachEvent("on"+e,r)}),t.exports={add:s,remove:a,fabricate:function(t,e,n){var s=-1===i.indexOf(e)?new r(e,{detail:n}):function(){var t;return o.createEvent?(t=o.createEvent("Event")).initEvent(e,!0,!0):o.createEventObject&&(t=o.createEventObject()),t}();t.dispatchEvent?t.dispatchEvent(s):t.fireEvent("on"+e,s)}}},874:(t,e,n)=>{"use strict";var r=[],i="",o=/^on/;for(i in n.g)o.test(i)&&r.push(i.slice(2));t.exports=r},638:(t,e,n)=>{var r=n.g.CustomEvent;t.exports=function(){try{var t=new r("cat",{detail:{foo:"bar"}});return"cat"===t.type&&"bar"===t.detail.foo}catch(t){}return!1}()?r:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(t,e){var n=document.createEvent("CustomEvent");return e?n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail):n.initCustomEvent(t,!1,!1,void 0),n}:function(t,e){var n=document.createEventObject();return n.type=t,e?(n.bubbles=Boolean(e.bubbles),n.cancelable=Boolean(e.cancelable),n.detail=e.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}},425:t=>{"use strict";var e={};function n(t){var n=e[t];return n?n.lastIndex=0:e[t]=n=new RegExp("(?:^|\\s)"+t+"(?:\\s|$)","g"),n}t.exports={add:function(t,e){var r=t.className;r.length?n(e).test(r)||(t.className+=" "+e):t.className=e},rm:function(t,e){t.className=t.className.replace(n(e)," ").trim()}}},137:(t,e,n)=>{"use strict";var r=n(229),i=n(808),o=n(425),s=document,a=s.documentElement;function c(t,e,r,o){n.g.navigator.pointerEnabled?i[e](t,{mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"}[r],o):n.g.navigator.msPointerEnabled?i[e](t,{mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"}[r],o):(i[e](t,{mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"}[r],o),i[e](t,r,o))}function u(t){if(void 0!==t.touches)return t.touches.length;if(void 0!==t.which&&0!==t.which)return t.which;if(void 0!==t.buttons)return t.buttons;var e=t.button;return void 0!==e?1&e?1:2&e?3:4&e?2:0:void 0}function l(t,e){return void 0!==n.g[e]?n.g[e]:a.clientHeight?a[t]:s.body[t]}function d(t,e,n){var r,i=(t=t||{}).className||"";return t.className+=" gu-hide",r=s.elementFromPoint(e,n),t.className=i,r}function f(){return!1}function h(){return!0}function v(t){return t.width||t.right-t.left}function m(t){return t.height||t.bottom-t.top}function p(t){return t.parentNode===s?null:t.parentNode}function g(t){return"INPUT"===t.tagName||"TEXTAREA"===t.tagName||"SELECT"===t.tagName||y(t)}function y(t){return!!t&&"false"!==t.contentEditable&&("true"===t.contentEditable||y(p(t)))}function b(t){return t.nextElementSibling||function(){var e=t;do{e=e.nextSibling}while(e&&1!==e.nodeType);return e}()}function E(t,e){var n=function(t){return t.targetTouches&&t.targetTouches.length?t.targetTouches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t}(e),r={pageX:"clientX",pageY:"clientY"};return t in r&&!(t in n)&&r[t]in n&&(t=r[t]),n[t]}t.exports=function(t,e){var n,y,k,w,C,S,L,T,D,x,O;1===arguments.length&&!1===Array.isArray(t)&&(e=t,t=[]);var I,B=null,N=e||{};void 0===N.moves&&(N.moves=h),void 0===N.accepts&&(N.accepts=h),void 0===N.invalid&&(N.invalid=function(){return!1}),void 0===N.containers&&(N.containers=t||[]),void 0===N.isContainer&&(N.isContainer=f),void 0===N.copy&&(N.copy=!1),void 0===N.copySortSource&&(N.copySortSource=!1),void 0===N.revertOnSpill&&(N.revertOnSpill=!1),void 0===N.removeOnSpill&&(N.removeOnSpill=!1),void 0===N.direction&&(N.direction="vertical"),void 0===N.ignoreInputTextSelection&&(N.ignoreInputTextSelection=!0),void 0===N.mirrorContainer&&(N.mirrorContainer=s.body);var A=r({containers:N.containers,start:function(t){var e=F(t);e&&V(e)},end:_,cancel:G,remove:z,destroy:function(){U(!0),$({})},canMove:function(t){return!!F(t)},dragging:!1});return!0===N.removeOnSpill&&A.on("over",(function(t){o.rm(t,"gu-hide")})).on("out",(function(t){A.dragging&&o.add(t,"gu-hide")})),U(),A;function R(t){return-1!==A.containers.indexOf(t)||N.isContainer(t)}function U(t){var e=t?"remove":"add";c(a,e,"mousedown",j),c(a,e,"mouseup",$)}function X(t){c(a,t?"remove":"add","mousemove",M)}function P(t){var e=t?"remove":"add";i[e](a,"selectstart",Y),i[e](a,"click",Y)}function Y(t){I&&t.preventDefault()}function j(t){if(S=t.clientX,L=t.clientY,1===u(t)&&!t.metaKey&&!t.ctrlKey){var e=t.target,n=F(e);n&&(I=n,X(),"mousedown"===t.type&&(g(e)?e.focus():t.preventDefault()))}}function M(t){if(I)if(0!==u(t)){if(!(void 0!==t.clientX&&Math.abs(t.clientX-S)<=(N.slideFactorX||0)&&void 0!==t.clientY&&Math.abs(t.clientY-L)<=(N.slideFactorY||0))){if(N.ignoreInputTextSelection){var e=E("clientX",t)||0,r=E("clientY",t)||0;if(g(s.elementFromPoint(e,r)))return}var i=I;X(!0),P(),_(),V(i);var d,f={left:(d=k.getBoundingClientRect()).left+l("scrollLeft","pageXOffset"),top:d.top+l("scrollTop","pageYOffset")};w=E("pageX",t)-f.left,C=E("pageY",t)-f.top,o.add(x||k,"gu-transit"),function(){if(!n){var t=k.getBoundingClientRect();(n=k.cloneNode(!0)).style.width=v(t)+"px",n.style.height=m(t)+"px",o.rm(n,"gu-transit"),o.add(n,"gu-mirror"),N.mirrorContainer.appendChild(n),c(a,"add","mousemove",W),o.add(N.mirrorContainer,"gu-unselectable"),A.emit("cloned",n,k,"mirror")}}(),W(t)}}else $({})}function F(t){if(!(A.dragging&&n||R(t))){for(var e=t;p(t)&&!1===R(p(t));){if(N.invalid(t,e))return;if(!(t=p(t)))return}var r=p(t);if(r&&!N.invalid(t,e)&&N.moves(t,r,e,b(t)))return{item:t,source:r}}}function V(t){var e,n;e=t.item,n=t.source,("boolean"==typeof N.copy?N.copy:N.copy(e,n))&&(x=t.item.cloneNode(!0),A.emit("cloned",x,t.item,"copy")),y=t.source,k=t.item,T=D=b(t.item),A.dragging=!0,A.emit("drag",k,y)}function _(){if(A.dragging){var t=x||k;J(t,p(t))}}function K(){I=!1,X(!0),P(!0)}function $(t){if(K(),A.dragging){var e=x||k,r=E("clientX",t)||0,i=E("clientY",t)||0,o=Q(d(n,r,i),r,i);o&&(x&&N.copySortSource||!x||o!==y)?J(e,o):N.removeOnSpill?z():G()}}function J(t,e){var n=p(t);x&&N.copySortSource&&e===y&&n.removeChild(k),q(e)?A.emit("cancel",t,y,y):A.emit("drop",t,e,y,D),H()}function z(){if(A.dragging){var t=x||k,e=p(t);e&&e.removeChild(t),A.emit(x?"cancel":"remove",t,e,y),H()}}function G(t){if(A.dragging){var e=arguments.length>0?t:N.revertOnSpill,n=x||k,r=p(n),i=q(r);!1===i&&e&&(x?r&&r.removeChild(x):y.insertBefore(n,T)),i||e?A.emit("cancel",n,y,y):A.emit("drop",n,r,y,D),H()}}function H(){var t=x||k;K(),n&&(o.rm(N.mirrorContainer,"gu-unselectable"),c(a,"remove","mousemove",W),p(n).removeChild(n),n=null),t&&o.rm(t,"gu-transit"),O&&clearTimeout(O),A.dragging=!1,B&&A.emit("out",t,B,y),A.emit("dragend",t),y=k=x=T=D=O=B=null}function q(t,e){var r;return r=void 0!==e?e:n?D:b(x||k),t===y&&r===T}function Q(t,e,n){for(var r=t;r&&!i();)r=p(r);return r;function i(){if(!1===R(r))return!1;var i=Z(r,t),o=tt(r,i,e,n);return!!q(r,o)||N.accepts(k,r,y,o)}}function W(t){if(n){t.preventDefault();var e=E("clientX",t)||0,r=E("clientY",t)||0,i=e-w,o=r-C;n.style.left=i+"px",n.style.top=o+"px";var s=x||k,a=d(n,e,r),c=Q(a,e,r),u=null!==c&&c!==B;(u||null===c)&&(B&&v("out"),B=c,u&&v("over"));var l=p(s);if(c!==y||!x||N.copySortSource){var f,h=Z(c,a);if(null!==h)f=tt(c,h,e,r);else{if(!0!==N.revertOnSpill||x)return void(x&&l&&l.removeChild(s));f=T,c=y}(null===f&&u||f!==s&&f!==b(s))&&(D=f,c.insertBefore(s,f),A.emit("shadow",s,c,y))}else l&&l.removeChild(s)}function v(t){A.emit(t,s,B,y)}}function Z(t,e){for(var n=e;n!==t&&p(n)!==t;)n=p(n);return n===a?null:n}function tt(t,e,n,r){var i,o="horizontal"===N.direction;return e!==t?(i=e.getBoundingClientRect(),s(o?n>i.left+v(i)/2:r>i.top+m(i)/2)):function(){var e,i,s,a=t.children.length;for(e=0;e<a;e++){if(s=(i=t.children[e]).getBoundingClientRect(),o&&s.left+s.width/2>n)return i;if(!o&&s.top+s.height/2>r)return i}return null}();function s(t){return t?b(e):e}}}},115:t=>{var e;e="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){setTimeout(t,0)},t.exports=e}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let e;const r=new Uint8Array(16);function i(){if(!e&&(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(r)}const o=[];for(let t=0;t<256;++t)o.push((t+256).toString(16).slice(1));const s=function(e,n,r){if(t.randomUUID&&!n&&!e)return t.randomUUID();const s=(e=e||{}).random||(e.rng||i)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,n){r=r||0;for(let t=0;t<16;++t)n[r+t]=s[t];return n}return function(t,e=0){return(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase()}(s)};class a{constructor(){this.listeners={}}add(t,e,n,r=s()){this.listeners[r]={event:t,element:e,handler:n},e.addEventListener(t,n)}remove(t){const e=this.listeners[t];e&&(e.element.removeEventListener(e.event,e.handler),delete this.listeners[t])}}const c=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,u={todo:"TODO",doing:"DOING",done:"DONE"};class l{constructor(t){this.id=t.id||s(),this.title=t.title,this.status=t.status||u.todo}update(t){this.title=t.title||this.title,this.status=t.status||this.status}static validate(t){return!!(t&&(e=t.id,"string"==typeof e&&c.test(e)&&t.title&&Object.values(u).includes(t.status)));var e}}const d="TASKS";class f{constructor(){this.storage=localStorage,this.tasks=this.getStoredTasks()}add(t){this.tasks.push(t),this.updateStorage()}delete(t){this.tasks=this.tasks.filter((({id:e})=>e!==t.id)),this.updateStorage()}find(t){return this.tasks.find((e=>e.id===t))}update(t){this.tasks=this.tasks.map((e=>e.id===t.id?t:e))}filter(t){return this.tasks.filter((({status:e})=>e===t))}updateStorage(){this.storage.setItem(d,JSON.stringify(this.tasks))}getStoredTasks(){const t=this.storage.getItem(d);if(!t)return[];try{const e=JSON.parse(t);return function(t){if(!Array.isArray(t)||!t.every((t=>l.validate(t))))throw new Error("引数「value」はTaskObject[]型と一致しません。")}(e),e.map((t=>new l(t)))}catch(t){return this.storage.removeItem(d),[]}}moveAboveTarget(t,e){const n=this.tasks.indexOf(t),r=this.tasks.indexOf(e);this.changeOrder(t,n,n<r?r-1:r)}moveToLast(t){const e=this.tasks.indexOf(t);this.changeOrder(t,e,this.tasks.length)}changeOrder(t,e,n){this.tasks.splice(e,1),this.tasks.splice(n,0,t),this.updateStorage()}}var h=n(137),v=n.n(h);class m{constructor(t,e,n){this.todoList=t,this.doingList=e,this.doneList=n}append(t){const{taskEl:e,deleteButtonEl:n}=this.render(t);return this.todoList.append(e),{deleteButtonEl:n}}render(t){const e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("button");return e.id=t.id,e.classList.add("task-item"),r.textContent="削除",e.append(n,r),{taskEl:e,deleteButtonEl:r}}renderAll(t){return[...this.renderList(t.filter(u.todo),this.todoList),...this.renderList(t.filter(u.doing),this.doingList),...this.renderList(t.filter(u.done),this.doneList)]}remove(t){const e=document.getElementById(t.id);e&&(t.status===u.todo&&this.todoList.removeChild(e),t.status===u.doing&&this.doingList.removeChild(e),t.status===u.done&&this.doneList.removeChild(e))}renderList(t,e){if(0===t.length)return[];const n=[];return t.forEach((t=>{const{taskEl:r,deleteButtonEl:i}=this.render(t);e.append(r),n.push({task:t,deleteButtonEl:i})})),n}subscribeDragAndDrop(t){v()([this.todoList,this.doingList,this.doneList]).on("drop",((e,n,r,i)=>{let o=u.todo;"doingList"===n.id&&(o=u.doing),"doneList"===n.id&&(o=u.done),t(e,i,o)}))}getId(t){return t.id}}class p{constructor(){this.eventListener=new a,this.taskCollection=new f,this.taskRenderer=new m(document.getElementById("todoList"),document.getElementById("doingList"),document.getElementById("doneList")),this.handleSubmit=t=>{t.preventDefault();const e=document.getElementById("title");if(!e.value)return;const n=new l({title:e.value});this.taskCollection.add(n);const{deleteButtonEl:r}=this.taskRenderer.append(n);this.eventListener.add("click",r,(()=>this.handleClickDeleteTask(n)),n.id),e.value=""},this.executeDeleteTask=t=>{this.eventListener.remove(t.id),this.taskCollection.delete(t),this.taskRenderer.remove(t)},this.handleClickDeleteTask=t=>{window.confirm(`「${t.title}」を削除してよろしいですか？`)&&this.executeDeleteTask(t)},this.handleDropAndDrop=(t,e,n)=>{const r=this.taskRenderer.getId(t);if(!r)return;const i=this.taskCollection.find(r);if(i)if(i.update({status:n}),this.taskCollection.update(i),e){const t=this.taskRenderer.getId(e);if(!t)return;const n=this.taskCollection.find(t);if(!n)return;this.taskCollection.moveAboveTarget(i,n)}else this.taskCollection.moveToLast(i)},this.handleClickDeleteAllDoneTasks=()=>{window.confirm("DONEのタスクを一括削除してよろしいですか？")&&this.taskCollection.filter(u.done).forEach((t=>this.executeDeleteTask(t)))}}start(){const t=this.taskRenderer.renderAll(this.taskCollection),e=document.getElementById("createForm"),n=document.getElementById("deleteAllDoneTask");t.forEach((({task:t,deleteButtonEl:e})=>{this.eventListener.add("click",e,(()=>this.handleClickDeleteTask(t)),t.id)})),this.eventListener.add("submit",e,this.handleSubmit),this.eventListener.add("click",n,this.handleClickDeleteAllDoneTasks),this.taskRenderer.subscribeDragAndDrop(this.handleDropAndDrop)}}window.addEventListener("load",(()=>{(new p).start()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,